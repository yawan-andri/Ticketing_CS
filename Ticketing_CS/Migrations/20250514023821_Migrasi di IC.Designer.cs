// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticketing_CS.Data;

#nullable disable

namespace Ticketing_CS.Migrations
{
    [DbContext(typeof(TicketingContext))]
    [Migration("20250514023821_Migrasi di IC")]
    partial class MigrasidiIC
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ticketing_CS.Models.ChoiceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Choice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChoiceList");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Choice = "On-Progress",
                            IsActive = true,
                            Option = "Status"
                        },
                        new
                        {
                            Id = 2,
                            Choice = "Finished",
                            IsActive = true,
                            Option = "Status"
                        },
                        new
                        {
                            Id = 3,
                            Choice = "Cancelled",
                            IsActive = true,
                            Option = "Status"
                        },
                        new
                        {
                            Id = 4,
                            Choice = "On Waiting",
                            IsActive = true,
                            Option = "Status"
                        },
                        new
                        {
                            Id = 5,
                            Choice = "Normal",
                            IsActive = true,
                            Option = "Urgency"
                        },
                        new
                        {
                            Id = 6,
                            Choice = "Urgent",
                            IsActive = true,
                            Option = "Urgency"
                        },
                        new
                        {
                            Id = 7,
                            Choice = "Very Urgent",
                            IsActive = true,
                            Option = "Urgency"
                        },
                        new
                        {
                            Id = 8,
                            Choice = "Normal",
                            IsActive = true,
                            Option = "Level"
                        },
                        new
                        {
                            Id = 9,
                            Choice = "Medium",
                            IsActive = true,
                            Option = "Level"
                        },
                        new
                        {
                            Id = 10,
                            Choice = "Hard",
                            IsActive = true,
                            Option = "Level"
                        });
                });

            modelBuilder.Entity("Ticketing_CS.Models.Ticketing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateInput")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Ticket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrgencyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UrgencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticketings");
                });

            modelBuilder.Entity("Ticketing_CS.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Password = "1243",
                            UserName = "Super"
                        });
                });

            modelBuilder.Entity("Ticketing_CS.Models.Ticketing", b =>
                {
                    b.HasOne("Ticketing_CS.Models.ChoiceList", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ticketing_CS.Models.ChoiceList", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ticketing_CS.Models.ChoiceList", "Urgency")
                        .WithMany()
                        .HasForeignKey("UrgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ticketing_CS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Status");

                    b.Navigation("Urgency");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
